name: CI

# Trigger workflow on push or PR
on:
  push:           # runs on push to any branch
  pull_request:
    branches: [main]

jobs:
  # Step 1: Get latest Tabular Editor 2.x download URL
  Get_download_URL_for_Tabular_Editor:
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.get_url.outputs.DOWNLOAD_URL }}
    steps:
      - name: Try to open the URL and extract the download link
        id: get_url
        run: |
          url="https://github.com/TabularEditor/TabularEditor/releases/latest"
          response_url=$(curl -Ls -o /dev/null -w %{url_effective} $url || echo "failed")

          if [ "$response_url" = "failed" ]; then
            echo "Failed to get the response URL."
            exit 1
          fi

          echo "Response URL: $response_url"

          if [[ $response_url =~ tag\/([0-9]+\.[0-9]+(\.[0-9]+)?) ]]; then
            version="${BASH_REMATCH[1]}"
            if [[ $version =~ ^[0-9]+\.[0-9]+$ ]]; then
              version="${version}.0"
            fi
            echo "Extracted version: $version"
            download_url="https://cdn.tabulareditor.com/files/TabularEditor.${version}.zip"
            echo "Download URL: $download_url"
            echo "DOWNLOAD_URL=$download_url" >> $GITHUB_OUTPUT
          else
            echo "Failed to extract the version number from the response URL."
            exit 1
          fi
        shell: bash


  # Step 2: Install Tabular Editor and run BPA
  Install_TabularEditor_and_run_BPA:
    needs: Get_download_URL_for_Tabular_Editor
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Tabular Editor
        run: |
          curl -L ${{ needs.Get_download_URL_for_Tabular_Editor.outputs.download_url }} -o TabularEditor.zip
          unzip TabularEditor.zip

      - name: Run Tabular Editor and save BPA output
        continue-on-error: true
        run: |
          # Only save BPA output to file, don't print to console
          ./TabularEditor.exe "CCDP.SemanticModel/definition/database.tmdl" -A "BPARules.json" `
          | Out-File -FilePath "./BPA_output.txt" -Encoding utf8
        shell: pwsh

      - name: Check BPA severity levels and fail only on severity 3
        run: |
          Write-Host "üîç Checking BPA output for rule severities..."
          $bpaContent = Get-Content "./BPA_output.txt"
          $rulesJson = Get-Content "BPARules.json" | ConvertFrom-Json

          # Build dictionary of rule name -> severity
          $ruleMap = @{}
          foreach ($r in $rulesJson) {
            $ruleMap[$r.Name] = $r.Severity
          }

          # Extract all violation lines
          $violations = $bpaContent | Where-Object { $_ -match "violates rule" }

          $severity3Found = $false
          $printed = @{}

          foreach ($v in $violations) {
            if ($v -match 'violates rule "(.*)"') {
              $ruleName = $matches[1]
              $severity = $ruleMap[$ruleName]
              if (-not $severity) { $severity = "Unknown" }

              $lineOut = "$v  -->  (Severity: $severity)"

              # Only print each violation once, keeping the severity type line
              if (-not $printed.ContainsKey($lineOut)) {
                $printed[$lineOut] = $true
                switch ($severity) {
                  3 {
                    Write-Host "‚ùå $lineOut" -ForegroundColor Red
                    $severity3Found = $true
                  }
                  2 {
                    Write-Warning "‚ö†Ô∏è $lineOut"
                  }
                  1 {
                    Write-Host "‚ÑπÔ∏è $lineOut" -ForegroundColor Blue
                  }
                  default {
                    Write-Host "‚ùî $lineOut" -ForegroundColor DarkGray
                  }
                }
              }
            }
          }

          if ($severity3Found) {
            Write-Host "`n==============================================================="
            Write-Host "‚ùå Severity 3 rule violations detected ‚Äî failing CI pipeline."
            Write-Host "==============================================================="
            exit 1
          } else {
            Write-Host "`n‚úÖ No Severity 3 rule violations found."
          }
        shell: pwsh

      - name: Upload BPA result into a .txt file
        uses: actions/upload-artifact@v4
        with:
          name: BPA_Result
          path: ./BPA_output.txt
          if-no-files-found: error