name: Power BI Fabric CI/CD (with BPA)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

env:
  FABRIC_API_URL: https://api.fabric.microsoft.com

permissions:
  id-token: write
  contents: read

jobs:
  validate-and-deploy:
    runs-on: windows-latest
    environment: ${{ github.ref_name == 'main' && 'Production' || 'Development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Tabular Editor Portable
        shell: pwsh
        run: |
          Write-Host "‚¨áÔ∏è Downloading Tabular Editor 2.27.2 portable..."
          $url = "https://cdn.tabulareditor.com/files/TabularEditor.2.27.2.zip"
          Invoke-WebRequest -Uri $url -OutFile "TabularEditor.zip"
          Expand-Archive TabularEditor.zip -DestinationPath "TabularEditor"
          Write-Host "‚úÖ Tabular Editor extracted."
          Get-ChildItem TabularEditor

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: >
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": ""
            }
          auth-type: SERVICE_PRINCIPAL
          allow-no-subscriptions: true

      - name: Get Fabric Access Token
        shell: pwsh
        run: |
          Write-Host "üîê Fetching Fabric access token..."
          $FABRIC_TOKEN = az account get-access-token --resource "${{ env.FABRIC_API_URL }}" --query accessToken -o tsv
          Write-Host "FABRIC_TOKEN=$FABRIC_TOKEN" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          Write-Host "‚úÖ Token retrieved."

      - name: Debug Repository Structure
        shell: pwsh
        run: |
          Write-Host "üìÇ Listing repository structure (for debug)..."
          Get-ChildItem -Recurse

      - name: Run BPA Validation
        shell: pwsh
        run: |
          Write-Host "üîç Running Best Practice Analyzer..."
          $ModelPath = "CCDP.SemanticModel/definition/model.tmdl"
          $RulesPath = "BPARules.json"
          $TEPath = "TabularEditor/TabularEditor.exe"
          $ExportPath = Join-Path (Get-Location) "bpa-results.json"
          Write-Host "Working directory: $(Get-Location)"
          Write-Host "Model path: $ModelPath"
          Write-Host "Rules path: $RulesPath"
          Write-Host "Export path: $ExportPath"
          if (-Not (Test-Path $ModelPath)) { Write-Error "‚ùå model.tmdl not found"; exit 1 }
          if (-Not (Test-Path $RulesPath)) { Write-Error "‚ùå BPARules.json not found"; exit 1 }
          if (-Not (Test-Path $TEPath)) { Write-Error "‚ùå TabularEditor.exe not found"; exit 1 }
          # Run BPA using TE
          Write-Host "üß† Executing BPA via $TEPath..."
          try {
            & $TEPath -BPA $ModelPath -Rules $RulesPath -ExportResults $ExportPath -Format JSON *>&1 | Tee-Object -Variable teOutput
            Write-Host "Tabular Editor output: $teOutput"
          } catch {
            Write-Error "‚ùå Tabular Editor failed: $_"
            exit 1
          }
          if (-Not (Test-Path $ExportPath)) { Write-Error "‚ùå BPA export file not created"; exit 1 }
          $results = Get-Content $ExportPath | ConvertFrom-Json
          $violations = $results | Where-Object { $_.Severity -eq "Error" }
          if ($violations.Count -gt 0) {
              Write-Host "‚ùå BPA found $($violations.Count) errors:"
              $violations | ForEach-Object { Write-Host " - Rule: $($_.RuleId) | $($_.Message)" }
              exit 1
          } else {
              Write-Host "‚úÖ BPA validation passed."
          }

      - name: Publish PBIP to Fabric Workspace
        if: success()
        shell: pwsh
        env:
          WORKSPACE_ID: ${{ github.ref_name == 'main' && vars.PROD_WORKSPACE_ID || vars.DEV_WORKSPACE_ID }}
          FABRIC_TOKEN: ${{ env.FABRIC_TOKEN }}
        run: |
          Write-Host "üöÄ Publishing CCDP.pbip to Fabric workspace $WORKSPACE_ID..."
          $PbipDir = "CCDP.pbip"
          if (-Not (Test-Path $PbipDir)) {
              Write-Error "‚ùå CCDP.pbip directory not found!"
              exit 1
          }
          Write-Host "üì¶ Zipping $PbipDir..."
          Compress-Archive -Path $PbipDir -DestinationPath "CCDP.pbip.zip" -Force
          if (-Not (Test-Path "CCDP.pbip.zip")) {
              Write-Error "‚ùå Failed to create CCDP.pbip.zip"
              exit 1
          }
          $Response = curl -s -w "`n%{http_code}" -X POST `
            "${{ env.FABRIC_API_URL }}/v1/workspaces/$WORKSPACE_ID/files" `
            -H "Authorization: Bearer $FABRIC_TOKEN" `
            -F "file=@CCDP.pbip.zip" `
            -F "overwrite=true" `
            -F "displayName=CCDP"
          $HTTP_BODY = $Response -split "`n" | Select-Object -First ($Response.Length - 1)
          $HTTP_CODE = $Response -split "`n" | Select-Object -Last 1
          Write-Host "Response code: $HTTP_CODE"
          Write-Host "Response body: $HTTP_BODY"
          if ([int]$HTTP_CODE -ge 200 -and [int]$HTTP_CODE -lt 300) {
              Write-Host "‚úÖ CCDP.pbip published successfully."
          } else {
              Write-Error "‚ùå Publish failed with HTTP $HTTP_CODE"
              exit 1
          }
