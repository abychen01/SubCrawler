name: Power BI Fabric CI/CD (with BPA Validation)

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [main]

env:
  FABRIC_API_URL: https://api.fabric.microsoft.com

permissions:
  id-token: write
  contents: read

jobs:
  validate-and-deploy:
    runs-on: windows-latest   # Tabular Editor runs on Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Tabular Editor CLI
        run: |
          choco install tabulareditor -y
          echo "‚úÖ Tabular Editor installed."

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: >
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": ""
            }
          auth-type: SERVICE_PRINCIPAL
          allow-no-subscriptions: true

      - name: Get Fabric Access Token
        id: get-token
        shell: bash
        run: |
          echo "üîê Fetching Fabric access token..."
          FABRIC_TOKEN=$(az account get-access-token --resource "${{ env.FABRIC_API_URL }}" --query accessToken -o tsv)
          echo "FABRIC_TOKEN=$FABRIC_TOKEN" >> $GITHUB_ENV
          echo "‚úÖ Token retrieved."

      - name: Run BPA Validation using Tabular Editor
        shell: pwsh
        run: |
          Write-Host "üîç Running Best Practice Analyzer on model.tmdl..."
          $ModelPath = "CCDP.SemanticModel/definition/model.tmdl"
          if (-Not (Test-Path $ModelPath)) {
              Write-Error "‚ùå model.tmdl not found at $ModelPath"
              exit 1
          }

          $RulesPath = "bpa-rules.json"
          if (-Not (Test-Path $RulesPath)) {
              Write-Error "‚ùå BPA rules file not found! Add bpa-rules.json to repo root or adjust path."
              exit 1
          }

          # Run BPA using Tabular Editor CLI
          tabulareditor -BPA $ModelPath -Rules $RulesPath -ExportResults "bpa-results.json" -IgnoreWarnings -Format JSON

          Write-Host "üìä BPA results exported to bpa-results.json"

          $results = Get-Content "bpa-results.json" | ConvertFrom-Json
          $violations = $results | Where-Object { $_.Severity -eq "Error" -or $_.Severity -eq "Warning" }

          if ($violations.Count -gt 0) {
              Write-Host "‚ùå BPA found $($violations.Count) issues:"
              $violations | ForEach-Object { Write-Host " - Rule: $($_.RuleId) | $($_.Message)" }
              exit 1
          } else {
              Write-Host "‚úÖ BPA validation passed ‚Äî no blocking issues found."
          }

      - name: Publish PBIP to Fabric Workspace
        if: success()
        shell: bash
        env:
          WORKSPACE_ID: ${{ vars.DEV_WORKSPACE_ID }}
          FABRIC_TOKEN: ${{ env.FABRIC_TOKEN }}
        run: |
          echo "üöÄ Publishing CCDP.pbip to Fabric workspace $WORKSPACE_ID..."
          if [ ! -f "CCDP.pbip" ]; then
            echo "‚ùå CCDP.pbip not found!"
            exit 1
          fi

          HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            "${{ env.FABRIC_API_URL }}/v1/workspaces/$WORKSPACE_ID/files" \
            -H "Authorization: Bearer $FABRIC_TOKEN" \
            -F "file=@CCDP.pbip" \
            -F "overwrite=true" \
            -F "displayName=CCDP.pbip")

          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
          HTTP_CODE=$(echo "$HTTP_RESPONSE" | tail -n1)
          echo "Response code: $HTTP_CODE"
          echo "Response body: $HTTP_BODY"

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "‚úÖ CCDP.pbip published successfully."
          else
            echo "‚ùå Publish failed with HTTP $HTTP_CODE"
            exit 1
          fi
